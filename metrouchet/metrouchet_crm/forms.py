from django import forms
from .models import Order, Client, Address, Service, CompanyService, WaterName, WaterPhoto, DocumentPhoto, Status, District
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.models import User
from django.forms import modelformset_factory
from django_select2.forms import ModelSelect2Widget


class UserFullnameChoiceField(forms.ModelChoiceField):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.queryset = User.objects.filter(groups__name__icontains='–ú–∞—Å—Ç–µ—Ä')

    def label_from_instance(self, obj):
        return obj.get_full_name()


class OrderForm(forms.ModelForm):
    master = UserFullnameChoiceField(queryset=User.objects.all(), label='–ú–∞—Å—Ç–µ—Ä', required=False)
    execution_date = forms.DateField(widget=forms.DateInput(format='%Y-%m-%d', attrs={'type': 'date'}), label='–î–∞—Ç–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è', required=False)
    start_time = forms.TimeField(widget=forms.TimeInput(attrs={'type': 'time'}), label='–í—Ä–µ–º—è –æ—Ç', required=False)
    end_time = forms.TimeField(widget=forms.TimeInput(attrs={'type': 'time'}), label='–í—Ä–µ–º—è –¥–æ', required=False)
    comments = forms.CharField(widget=forms.Textarea(attrs={'rows': 2}), required=False)
    comments_masters = forms.CharField(widget=forms.Textarea(attrs={'rows': 2}), required=False)

    class Meta:
        model = Order
        fields = ('status', 'execution_date', 'start_time', 'end_time', 'master', 'comments', 'comments_masters')

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['master'].empty_label = '-–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞-'
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'


# –§–æ—Ä–º–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
class ClientForm(forms.ModelForm):
    phone = forms.CharField(max_length=20, label='–¢–µ–ª–µ—Ñ–æ–Ω', required=False)
    client_name = forms.CharField(max_length=100, label='–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞', required=False)
    delete = forms.BooleanField(required=False, widget=forms.HiddenInput())


    class Meta:
        model = Client
        fields = ['phone', 'client_name']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'


# –§–æ—Ä–º—Å–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
ClientFormSet = modelformset_factory(Client, form=ClientForm, extra=1, can_delete=True)

# –§–æ—Ä–º—Å–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
ClientFormSetUpdate = modelformset_factory(Client, form=ClientForm, extra=0, can_delete=True)


class AddressForm(forms.ModelForm):
    district = forms.ModelChoiceField(queryset=District.objects.all(), label='–†–∞–π–æ–Ω', required=False)
    street_house = forms.CharField(max_length=255, label='–£–ª–∏—Ü–∞', required=False)
    apartment = forms.IntegerField(label="–ö–≤–∞—Ä—Ç–∏—Ä–∞", required=False)
    entrance = forms.IntegerField(label="–ü–æ–¥—ä–µ–∑–¥", required=False)
    floor = forms.IntegerField(label="–≠—Ç–∞–∂", required=False)
    intercom = forms.CharField(max_length=24, label='–î–æ–º–æ—Ñ–æ–Ω', required=False)

    class Meta:
        model = Address
        fields = '__all__'

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'


class ServiceForm(forms.ModelForm):
    service_name = forms.ModelChoiceField(queryset=CompanyService.objects.all(), label='–£—Å–ª—É–≥–∞', required=False)
    water_name = forms.ModelChoiceField(queryset=WaterName.objects.all(), label='–ú–æ–¥–µ–ª—å —Å—á–µ—Ç—á–∏–∫–æ–≤', required=False)
    cold_water = forms.IntegerField(label='–•–æ–ª–æ–¥–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤', required=False)
    hot_water = forms.IntegerField(label='–ì–æ—Ä—è—á–∏—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤', required=False)
    price = forms.DecimalField(label='–°—É–º–º–∞', required=False, max_digits=10, decimal_places=2)
    payment_master = forms.DecimalField(label='–û–ø–ª–∞—Ç–∞ –º–∞—Å—Ç–µ—Ä–∞', required=False, max_digits=10, decimal_places=2)
    delete = forms.BooleanField(required=False, widget=forms.HiddenInput())

    class Meta:
        model = Service
        fields = ['service_name', 'water_name', 'cold_water', 'hot_water', 'price', 'payment_master']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'

        self.fields['cold_water'].initial = 0
        self.fields['hot_water'].initial = 0
        self.fields['price'].initial = 0.0
        self.fields['payment_master'].initial = 0.0

    def clean(self):
        cleaned_data = super().clean()
        if not cleaned_data.get('cold_water'):
            cleaned_data['cold_water'] = 0
        if not cleaned_data.get('hot_water'):
            cleaned_data['hot_water'] = 0
        if not cleaned_data.get('price'):
            cleaned_data['price'] = 0
        if not cleaned_data.get('payment_master'):
            cleaned_data['payment_master'] = 0
        return cleaned_data


# –§–æ—Ä–º—Å–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥
ServiceFormSet = modelformset_factory(Service, form=ServiceForm, extra=1, can_delete=True)


class WaterNameForm(forms.ModelForm):
    water_name = forms.CharField(label='–ú–æ–¥–µ–ª—å —Å—á–µ—Ç—á–∏–∫–∞', max_length=64, required=False)
    water_price = forms.DecimalField(label='–¶–µ–Ω–∞ —Å –∑–∞–º–µ–Ω–æ–π', max_digits=10, decimal_places=2, required=False)

    class Meta:
        model = WaterName
        fields = ['water_name', 'water_price']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'


class WaterPhotoForm(forms.ModelForm):
    CHOICES = [
        ('', '---------'),  # –î–æ–±–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–π –≤—ã–±–æ—Ä –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        ('–•–í', 'üîµ–•–í–°'),
        ('–ì–í', 'üî¥–ì–í–°')
    ]
    cold_or_hot = forms.ChoiceField(label='–•–≤—Å –∏–ª–∏ –≥–≤—Å', required=False, choices=CHOICES, initial='')
    water_photo = forms.ImageField(label='–§–æ—Ç–æ —Å—á–µ—Ç—á–∏–∫–∞', required=False)
    delete = forms.BooleanField(required=False, widget=forms.HiddenInput())

    class Meta:
        model = WaterPhoto
        fields = ['cold_or_hot', 'water_photo']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'


# –§–æ—Ä–º—Å–µ—Ç –¥–ª—è —Ñ–æ—Ç–æ —Å—á–µ—Ç—á–∏–∫–æ–≤
WaterPhotoFormSet = modelformset_factory(WaterPhoto, form=WaterPhotoForm, extra=1, can_delete=True)


class DocumentPhotoForm(forms.ModelForm):
    document_photo = forms.ImageField(label='–§–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', required=False)
    delete = forms.BooleanField(required=False, widget=forms.HiddenInput())

    class Meta:
        model = DocumentPhoto
        fields = ['document_photo']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'


# –§–æ—Ä–º—Å–µ—Ç –¥–ª—è —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
DocumentPhotoFormSet = modelformset_factory(DocumentPhoto, form=DocumentPhotoForm, extra=1, can_delete=True)


class OrderFilterForm(forms.Form):
    start_date = forms.DateField(widget=forms.DateInput(format='%Y-%m-%d', attrs={'type': 'date'}), label='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞', required=False)
    end_date = forms.DateField(widget=forms.DateInput(format='%Y-%m-%d', attrs={'type': 'date'}), label='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞', required=False)
    master = UserFullnameChoiceField(queryset=User.objects.all(), label='–ú–∞—Å—Ç–µ—Ä', required=False)
    search = forms.CharField(label='–ü–æ–∏—Å–∫', required=False)

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'


class OrderCountFilterForm(forms.Form):
    user = UserFullnameChoiceField(queryset=User.objects.all(), label='–ú–∞—Å—Ç–µ—Ä', required=False)
    start_date = forms.DateField(widget=forms.DateInput(format='%Y-%m-%d', attrs={'type': 'date'}), label='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞', required=False)
    end_date = forms.DateField(widget=forms.DateInput(format='%Y-%m-%d', attrs={'type': 'date'}), label='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞', required=False)

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'


class CompanyServiceForm(forms.ModelForm):
    company_service = forms.CharField(label='–£—Å–ª—É–≥–∞', max_length=64)
    service_price = forms.DecimalField(label='–¶–µ–Ω–∞', required=False, max_digits=10, decimal_places=2)

    class Meta:
        model = CompanyService
        fields = ['company_service', 'service_price']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'


class StatusForm(forms.ModelForm):
    status = forms.CharField(label='–°—Ç–∞—Ç—É—Å', max_length=15)

    class Meta:
        model = Status
        fields = ['status']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'


class DistrictForm(forms.ModelForm):
    district = forms.CharField(label='–†–∞–π–æ–Ω', max_length=64)

    class Meta:
        model = District
        fields = ['district']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'


class DistrictListForm(forms.Form):
    district_list = forms.CharField(
        widget=forms.Textarea(attrs={'placeholder': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏'}),
        label='–°–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤'
    )

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'


class AuthUserForm(AuthenticationForm, forms.ModelForm):
    class Meta:
        model = User
        fields = ('username', 'password')

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'


class RegisterUserForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ('first_name', 'last_name', 'username', 'groups')

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'

    # def save(self, commit=True):
    #     user = super().save(commit=False)
    #     user.set_password(self.cleaned_data["password"])
    #     if commit:
    #         user.save()
    #         if hasattr(self, "save_m2m"):
    #             self.save_m2m()
    #     return user


class ExcelImportForm(forms.Form):
    excel_file = forms.FileField(label='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel')

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'